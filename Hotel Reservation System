package codes;

import java.io.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.*;
import java.text.DecimalFormat;

public class HotelReservationSystem {
    private static class Room {
        int roomNumber;
        String category; // Standard, Deluxe, Suite
        double pricePerNight;
        boolean isAvailable;

        Room(int roomNumber, String category, double pricePerNight) {
            this.roomNumber = roomNumber;
            this.category = category;
            this.pricePerNight = pricePerNight;
            this.isAvailable = true;
        }
    }

    private static class Reservation {
        String reservationId;
        String guestName;
        int roomNumber;
        LocalDate checkInDate;
        LocalDate checkOutDate;
        double totalCost;
        boolean isPaid;

        Reservation(String reservationId, String guestName, int roomNumber,
                    LocalDate checkInDate, LocalDate checkOutDate, double totalCost) {
            this.reservationId = reservationId;
            this.guestName = guestName;
            this.roomNumber = roomNumber;
            this.checkInDate = checkInDate;
            this.checkOutDate = checkOutDate;
            this.totalCost = totalCost;
            this.isPaid = false;
        }
    }

    private ArrayList<Room> rooms;
    private ArrayList<Reservation> reservations;
    private Scanner scanner;
    private DecimalFormat df;
    private DateTimeFormatter dateFormatter;
    private static final String ROOMS_FILE = "rooms.dat";
    private static final String RESERVATIONS_FILE = "reservations.dat";

    public HotelReservationSystem() {
        rooms = new ArrayList<>();
        reservations = new ArrayList<>();
        scanner = new Scanner(System.in);
        df = new DecimalFormat("#.##");
        dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        initializeRooms();
        loadData();
    }

    private void initializeRooms() {
        // Standard Rooms
        for (int i = 101; i <= 110; i++) {
            rooms.add(new Room(i, "Standard", 100.0));
        }
        // Deluxe Rooms
        for (int i = 201; i <= 205; i++) {
            rooms.add(new Room(i, "Deluxe", 200.0));
        }
        // Suites
        for (int i = 301; i <= 303; i++) {
            rooms.add(new Room(i, "Suite", 350.0));
        }
    }

    private void saveData() {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(ROOMS_FILE))) {
            oos.writeObject(rooms);
        } catch (IOException e) {
            System.out.println("Error saving rooms: " + e.getMessage());
        }

        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(RESERVATIONS_FILE))) {
            oos.writeObject(reservations);
        } catch (IOException e) {
            System.out.println("Error saving reservations: " + e.getMessage());
        }
    }

    @SuppressWarnings("unchecked")
    private void loadData() {
        File roomsFile = new File(ROOMS_FILE);
        if (roomsFile.exists()) {
            try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(ROOMS_FILE))) {
                rooms = (ArrayList<Room>) ois.readObject();
            } catch (IOException | ClassNotFoundException e) {
                System.out.println("Error loading rooms: " + e.getMessage());
            }
        }

        File reservationsFile = new File(RESERVATIONS_FILE);
        if (reservationsFile.exists()) {
            try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(RESERVATIONS_FILE))) {
                reservations = (ArrayList<Reservation>) ois.readObject();
            } catch (IOException | ClassNotFoundException e) {
                System.out.println("Error loading reservations: " + e.getMessage());
            }
        }
    }

    private LocalDate parseDate(String input) {
        try {
            return LocalDate.parse(input, dateFormatter);
        } catch (DateTimeParseException e) {
            return null;
        }
    }

    private void searchAvailableRooms() {
        System.out.print("Enter check-in date (yyyy-MM-dd): ");
        String checkInStr = scanner.nextLine();
        LocalDate checkIn = parseDate(checkInStr);
        if (checkIn == null || checkIn.isBefore(LocalDate.now())) {
            System.out.println("Invalid or past check-in date.");
            return;
        }

        System.out.print("Enter check-out date (yyyy-MM-dd): ");
        String checkOutStr = scanner.nextLine();
        LocalDate checkOut = parseDate(checkOutStr);
        if (checkOut == null || !checkOut.isAfter(checkIn)) {
            System.out.println("Invalid check-out date. Must be after check-in.");
            return;
        }

        System.out.print("Enter room category (Standard/Deluxe/Suite, or leave blank): ");
        String category = scanner.nextLine().trim();

        System.out.println("\nAvailable Rooms:");
        System.out.printf("%-10s %-10s %-15s%n", "Room", "Category", "Price/Night");
        System.out.println("-".repeat(35));

        boolean found = false;
        for (Room room : rooms) {
            if (!room.isAvailable || (!category.isEmpty() && !room.category.equalsIgnoreCase(category))) {
                continue;
            }

            boolean isBooked = false;
            for (Reservation res : reservations) {
                if (res.roomNumber == room.roomNumber &&
                        !(checkOut.isBefore(res.checkInDate) || checkIn.isAfter(res.checkOutDate))) {
                    isBooked = true;
                    break;
                }
            }

            if (!isBooked) {
                System.out.printf("%-10d %-10s $%-14s%n",
                        room.roomNumber, room.category, df.format(room.pricePerNight));
                found = true;
            }
        }

        if (!found) {
            System.out.println("No rooms available for the selected criteria.");
        }
    }

    private void makeReservation() {
        System.out.print("Enter guest name: ");
        String guestName = scanner.nextLine().trim();
        if (guestName.isEmpty()) {
            System.out.println("Guest name is required.");
            return;
        }

        System.out.print("Enter room number: ");
        int roomNumber;
        try {
            roomNumber = Integer.parseInt(scanner.nextLine());
        } catch (NumberFormatException e) {
            System.out.println("Invalid room number.");
            return;
        }

        Room room = rooms.stream()
                .filter(r -> r.roomNumber == roomNumber && r.isAvailable)
                .findFirst()
                .orElse(null);
        if (room == null) {
            System.out.println("Room not found or unavailable.");
            return;
        }

        System.out.print("Enter check-in date (yyyy-MM-dd): ");
        LocalDate checkIn = parseDate(scanner.nextLine());
        if (checkIn == null || checkIn.isBefore(LocalDate.now())) {
            System.out.println("Invalid or past check-in date.");
            return;
        }

        System.out.print("Enter check-out date (yyyy-MM-dd): ");
        LocalDate checkOut = parseDate(scanner.nextLine());
        if (checkOut == null || !checkOut.isAfter(checkIn)) {
            System.out.println("Invalid check-out date. Must be after check-in.");
            return;
        }

        // Check for overlapping reservations
        for (Reservation res : reservations) {
            if (res.roomNumber == roomNumber &&
                    !(checkOut.isBefore(res.checkInDate) || checkIn.isAfter(res.checkOutDate))) {
                System.out.println("Room is booked for the selected dates.");
                return;
            }
        }

        long nights = checkIn.until(checkOut).getDays();
        double totalCost = room.pricePerNight * nights;

        System.out.printf("Total cost for %d nights: $%s%n", nights, df.format(totalCost));
        System.out.print("Proceed with payment? (y/n): ");
        if (!scanner.nextLine().trim().equalsIgnoreCase("y")) {
            System.out.println("Reservation cancelled.");
            return;
        }

        // Simulate payment processing
        System.out.print("Enter credit card number (16 digits): ");
        String cardNumber = scanner.nextLine().trim();
        if (!cardNumber.matches("\\d{16}")) {
            System.out.println("Invalid credit card number.");
            return;
        }

        String reservationId = UUID.randomUUID().toString().substring(0, 8);
        Reservation reservation = new Reservation(reservationId, guestName, roomNumber,
                checkIn, checkOut, totalCost);
        reservation.isPaid = true;
        reservations.add(reservation);
        saveData();

        System.out.println("Reservation created successfully!");
        System.out.println("Reservation ID: " + reservationId);
    }

    private void viewBookingDetails() {
        System.out.print("Enter reservation ID: ");
        String reservationId = scanner.nextLine().trim();

        Reservation reservation = reservations.stream()
                .filter(r -> r.reservationId.equals(reservationId))
                .findFirst()
                .orElse(null);

        if (reservation == null) {
            System.out.println("Reservation not found.");
            return;
        }

        Room room = rooms.stream()
                .filter(r -> r.roomNumber == reservation.roomNumber)
                .findFirst()
                .orElse(null);

        System.out.println("\nBooking Details:");
        System.out.println("Reservation ID: " + reservation.reservationId);
        System.out.println("Guest Name: " + reservation.guestName);
        System.out.println("Room Number: " + reservation.roomNumber);
        System.out.println("Room Category: " + (room != null ? room.category : "Unknown"));
        System.out.println("Check-in Date: " + reservation.checkInDate.format(dateFormatter));
        System.out.println("Check-out Date: " + reservation.checkOutDate.format(dateFormatter));
        System.out.println("Total Cost: $" + df.format(reservation.totalCost));
        System.out.println("Payment Status: " + (reservation.isPaid ? "Paid" : "Pending"));
    }

    public void run() {
        while (true) {
            System.out.println("\nHotel Reservation System");
            System.out.println("1. Search Available Rooms");
            System.out.println("2. Make Reservation");
            System.out.println("3. View Booking Details");
            System.out.println("4. Exit");
            System.out.print("Choose an option: ");

            String choice = scanner.nextLine();
            switch (choice) {
                case "1":
                    searchAvailableRooms();
                    break;
                case "2":
                    makeReservation();
                    break;
                case "3":
                    viewBookingDetails();
                    break;
                case "4":
                    System.out.println("Exiting...");
                    scanner.close();
                    saveData();
                    return;
                default:
                    System.out.println("Invalid option.");
            }
        }
    }

    public static void main(String[] args) {
        HotelReservationSystem system = new HotelReservationSystem();
        system.run();
    }
}
